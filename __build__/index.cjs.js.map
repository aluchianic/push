{"version":3,"file":"index.cjs.js","sources":["../src/index.ts"],"sourcesContent":["// @diode index.ts\nconst subscriptionButton = document.getElementById('subscriptionButton');\n\n/**\n * This function is needed because Chrome doesn't accept a base64 encoded string\n * as value for applicationServerKey in pushManager.subscribe yet\n * https://bugs.chromium.org/p/chromium/issues/detail?id=802280\n *\n * @param base64String\n * @return Uint8Array\n */\nfunction urlBase64ToUint8Array(base64String: string): Uint8Array {\n    // @ts-ignore\n    const padding = '='.repeat((4 - base64String.length % 4) % 4);\n    const base64 = (base64String + padding)\n        .replace(/\\-/g, '+')\n        .replace(/_/g, '/');\n\n    const rawData = window.atob(base64);\n    const outputArray = new Uint8Array(rawData.length);\n\n    for (let i = 0; i < rawData.length; ++i) {\n        outputArray[i] = rawData.charCodeAt(i);\n    }\n    return outputArray;\n}\n\n/**\n * Get the `registration` from service worker and create a new\n * subscription using `registration.pushManager.subscribe`. Then\n * register received new subscription by sending a POST request with\n * the subscription to the server.\n *\n * @return Promise<void>\n */\nasync function subscribe(): Promise<void> {\n    const registration = await navigator.serviceWorker.ready\n    // Get the server's public key\n    const response = await fetch('./vapidPublicKey');\n    const vapidPublicKey = await response.text();\n    // Chrome doesn't accept the base64-encoded (string) vapidPublicKey yet\n    const convertedVapidKey = urlBase64ToUint8Array(vapidPublicKey);\n    // Subscribe the user\n    const subscription = await registration.pushManager.subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: convertedVapidKey // ?optional\n    });\n    console.log('Subscribed', subscription.endpoint);\n    await fetch('register', {\n        method: 'post',\n        headers: {\n            'Content-type': 'application/json'\n        },\n        body: JSON.stringify({\n            subscription: subscription\n        })\n    });\n    return setUnsubscribeButton()\n}\n\n/**\n * Get existing subscription from service worker, unsubscribe\n * (`subscription.unsubscribe()`) and unregister it in the server with\n * a POST request to stop sending push messages to\n * unexisting endpoint.\n *\n * @return Promise<void>\n */\nasync function unsubscribe(): Promise<void> {\n    const registration = await navigator.serviceWorker.ready\n    const subscription = await registration.pushManager.getSubscription()\n    if (!subscription) {\n        console.error('[unsubscribe]' +\n            ' registration.pushManager.getSubscription() return null' +\n            ' subscription. Exiting...',)\n        return;\n    }\n\n    await subscription.unsubscribe()\n    console.log('Unsubscribed', subscription.endpoint);\n    await fetch('unregister', {\n        method: 'post',\n        headers: {\n            'Content-type': 'application/json'\n        },\n        body: JSON.stringify({\n            subscription: subscription\n        })\n    });\n\n    return setSubscribeButton()\n}\n\n// Change the subscription button's text and action.\nasync function setSubscribeButton(): Promise<void> {\n    subscriptionButton.onclick = await subscribe;\n    subscriptionButton.textContent = 'Subscribe!';\n}\n\nasync function setUnsubscribeButton(): Promise<void> {\n    subscriptionButton.onclick = await unsubscribe;\n    subscriptionButton.textContent = 'Unsubscribe!';\n}\n\nconst app = (async () => {\n    // Service Worker registration\n    let swRegistration: ServiceWorkerRegistration | null = null;\n\n    // Exit if browser doesn't have Notification API\n    if (!('Notification' in window)) {\n        console.log('[Notification Service] Notifications not supported in' +\n            ' this browser');\n        return;\n    }\n\n    if ('serviceWorker' in navigator) {\n        console.log('Service Worker and Push is supported');\n        // Register a Service Worker.\n        swRegistration = await navigator.serviceWorker.register('sw.js');\n\n        /**\n         * When the Service Worker is ready, enable the UI (button),\n         * and see if we already have a subscription set up.\n         */\n        const registration = await navigator.serviceWorker.ready\n        console.log('service worker registered', swRegistration);\n        subscriptionButton.removeAttribute('disabled');\n\n        const subscription = await registration.pushManager.getSubscription();\n        if (subscription) {\n            console.log('Already subscribed', subscription.endpoint);\n            await setUnsubscribeButton();\n        } else {\n            await setSubscribeButton();\n        }\n    } else {\n        console.warn('Push messaging is not supported');\n    }\n})();\n"],"names":["subscriptionButton","document","getElementById","urlBase64ToUint8Array","base64String","base64","repeat","length","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","async","subscribe","registration","navigator","serviceWorker","ready","response","fetch","convertedVapidKey","text","subscription","pushManager","userVisibleOnly","applicationServerKey","console","log","endpoint","method","headers","body","JSON","stringify","setUnsubscribeButton","unsubscribe","getSubscription","setSubscribeButton","error","onclick","textContent","app","swRegistration","register","removeAttribute","warn"],"mappings":"aACA,MAAMA,mBAAqBC,SAASC,eAAe,sBAUnD,SAASC,sBAAsBC,SAGrBC,GAAUD,EADA,IAAIE,QAAQ,EAAIF,EAAaG,OAAS,GAAK,IAEtDC,QAAQ,MAAO,KACfA,QAAQ,KAAM,KAEbC,EAAUC,OAAOC,KAAKN,GACtBO,EAAc,IAAIC,WAAWJ,EAAQF,YAEtC,IAAIO,EAAI,EAAGA,EAAIL,EAAQF,SAAUO,EAClCF,EAAYE,GAAKL,EAAQM,WAAWD,UAEjCF,EAWXI,eAAeC,kBACLC,QAAqBC,UAAUC,cAAcC,MAE7CC,QAAiBC,MAAM,oBAGvBC,EAAoBrB,4BAFGmB,EAASG,QAIhCC,QAAqBR,EAAaS,YAAYV,UAAU,CAC1DW,iBAAiB,EACjBC,qBAAsBL,WAE1BM,QAAQC,IAAI,aAAcL,EAAaM,gBACjCT,MAAM,WAAY,CACpBU,OAAQ,OACRC,QAAS,gBACW,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBX,aAAcA,MAGfY,uBAWXtB,eAAeuB,oBACLrB,QAAqBC,UAAUC,cAAcC,MAC7CK,QAAqBR,EAAaS,YAAYa,qBAC/Cd,eAOCA,EAAaa,cACnBT,QAAQC,IAAI,eAAgBL,EAAaM,gBACnCT,MAAM,aAAc,CACtBU,OAAQ,OACRC,QAAS,gBACW,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBX,aAAcA,MAIfe,qBAlBHX,QAAQY,MAAM,iGAsBtB1B,eAAeyB,qBACXzC,mBAAmB2C,cAAgB1B,UACnCjB,mBAAmB4C,YAAc,aAGrC5B,eAAesB,uBACXtC,mBAAmB2C,cAAgBJ,YACnCvC,mBAAmB4C,YAAc,eAGrC,MAAMC,IAAM,eAEJC,EAAmD,QAGjD,iBAAkBpC,UAMpB,kBAAmBS,UAAW,CAC9BW,QAAQC,IAAI,wCAEZe,QAAuB3B,UAAUC,cAAc2B,SAAS,eAMlD7B,QAAqBC,UAAUC,cAAcC,MACnDS,QAAQC,IAAI,4BAA6Be,GACzC9C,mBAAmBgD,gBAAgB,kBAE7BtB,QAAqBR,EAAaS,YAAYa,kBAChDd,GACAI,QAAQC,IAAI,qBAAsBL,EAAaM,gBACzCM,8BAEAG,0BAGVX,QAAQmB,KAAK,wCA1BbnB,QAAQC,IAAI,uEANR"}